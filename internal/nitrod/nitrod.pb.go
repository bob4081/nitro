// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: internal/nitrod/nitrod.proto

package nitrod

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PhpIniSetting int32

const (
	PhpIniSetting_MAX_EXECUTION_TIME  PhpIniSetting = 0
	PhpIniSetting_UPLOAD_MAX_FILESIZE PhpIniSetting = 1
	PhpIniSetting_MAX_INPUT_TIME      PhpIniSetting = 2
	PhpIniSetting_MAX_INPUT_VARS      PhpIniSetting = 3
	PhpIniSetting_MAX_FILE_UPLOADS    PhpIniSetting = 4
	PhpIniSetting_MEMORY_LIMIT        PhpIniSetting = 5
)

// Enum value maps for PhpIniSetting.
var (
	PhpIniSetting_name = map[int32]string{
		0: "MAX_EXECUTION_TIME",
		1: "UPLOAD_MAX_FILESIZE",
		2: "MAX_INPUT_TIME",
		3: "MAX_INPUT_VARS",
		4: "MAX_FILE_UPLOADS",
		5: "MEMORY_LIMIT",
	}
	PhpIniSetting_value = map[string]int32{
		"MAX_EXECUTION_TIME":  0,
		"UPLOAD_MAX_FILESIZE": 1,
		"MAX_INPUT_TIME":      2,
		"MAX_INPUT_VARS":      3,
		"MAX_FILE_UPLOADS":    4,
		"MEMORY_LIMIT":        5,
	}
)

func (x PhpIniSetting) Enum() *PhpIniSetting {
	p := new(PhpIniSetting)
	*p = x
	return p
}

func (x PhpIniSetting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhpIniSetting) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_nitrod_nitrod_proto_enumTypes[0].Descriptor()
}

func (PhpIniSetting) Type() protoreflect.EnumType {
	return &file_internal_nitrod_nitrod_proto_enumTypes[0]
}

func (x PhpIniSetting) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhpIniSetting.Descriptor instead.
func (PhpIniSetting) EnumDescriptor() ([]byte, []int) {
	return file_internal_nitrod_nitrod_proto_rawDescGZIP(), []int{0}
}

type ServiceAction int32

const (
	ServiceAction_RESTART ServiceAction = 0
	ServiceAction_STOP    ServiceAction = 1
	ServiceAction_START   ServiceAction = 2
)

// Enum value maps for ServiceAction.
var (
	ServiceAction_name = map[int32]string{
		0: "RESTART",
		1: "STOP",
		2: "START",
	}
	ServiceAction_value = map[string]int32{
		"RESTART": 0,
		"STOP":    1,
		"START":   2,
	}
)

func (x ServiceAction) Enum() *ServiceAction {
	p := new(ServiceAction)
	*p = x
	return p
}

func (x ServiceAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceAction) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_nitrod_nitrod_proto_enumTypes[1].Descriptor()
}

func (ServiceAction) Type() protoreflect.EnumType {
	return &file_internal_nitrod_nitrod_proto_enumTypes[1]
}

func (x ServiceAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceAction.Descriptor instead.
func (ServiceAction) EnumDescriptor() ([]byte, []int) {
	return file_internal_nitrod_nitrod_proto_rawDescGZIP(), []int{1}
}

type ChangePhpIniSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string        `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Setting PhpIniSetting `protobuf:"varint,2,opt,name=setting,proto3,enum=nitrod.PhpIniSetting" json:"setting,omitempty"`
	Value   string        `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ChangePhpIniSettingRequest) Reset() {
	*x = ChangePhpIniSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nitrod_nitrod_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePhpIniSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePhpIniSettingRequest) ProtoMessage() {}

func (x *ChangePhpIniSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nitrod_nitrod_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePhpIniSettingRequest.ProtoReflect.Descriptor instead.
func (*ChangePhpIniSettingRequest) Descriptor() ([]byte, []int) {
	return file_internal_nitrod_nitrod_proto_rawDescGZIP(), []int{0}
}

func (x *ChangePhpIniSettingRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ChangePhpIniSettingRequest) GetSetting() PhpIniSetting {
	if x != nil {
		return x.Setting
	}
	return PhpIniSetting_MAX_EXECUTION_TIME
}

func (x *ChangePhpIniSettingRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type DisableXdebugRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DisableXdebugRequest) Reset() {
	*x = DisableXdebugRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nitrod_nitrod_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableXdebugRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableXdebugRequest) ProtoMessage() {}

func (x *DisableXdebugRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nitrod_nitrod_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableXdebugRequest.ProtoReflect.Descriptor instead.
func (*DisableXdebugRequest) Descriptor() ([]byte, []int) {
	return file_internal_nitrod_nitrod_proto_rawDescGZIP(), []int{1}
}

func (x *DisableXdebugRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type EnableXdebugRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *EnableXdebugRequest) Reset() {
	*x = EnableXdebugRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nitrod_nitrod_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableXdebugRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableXdebugRequest) ProtoMessage() {}

func (x *EnableXdebugRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nitrod_nitrod_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableXdebugRequest.ProtoReflect.Descriptor instead.
func (*EnableXdebugRequest) Descriptor() ([]byte, []int) {
	return file_internal_nitrod_nitrod_proto_rawDescGZIP(), []int{2}
}

func (x *EnableXdebugRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetPhpIniSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Setting string `protobuf:"bytes,2,opt,name=setting,proto3" json:"setting,omitempty"`
}

func (x *GetPhpIniSettingRequest) Reset() {
	*x = GetPhpIniSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nitrod_nitrod_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPhpIniSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPhpIniSettingRequest) ProtoMessage() {}

func (x *GetPhpIniSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nitrod_nitrod_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPhpIniSettingRequest.ProtoReflect.Descriptor instead.
func (*GetPhpIniSettingRequest) Descriptor() ([]byte, []int) {
	return file_internal_nitrod_nitrod_proto_rawDescGZIP(), []int{3}
}

func (x *GetPhpIniSettingRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetPhpIniSettingRequest) GetSetting() string {
	if x != nil {
		return x.Setting
	}
	return ""
}

type PhpFpmServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string        `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Action  ServiceAction `protobuf:"varint,2,opt,name=action,proto3,enum=nitrod.ServiceAction" json:"action,omitempty"`
}

func (x *PhpFpmServiceRequest) Reset() {
	*x = PhpFpmServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nitrod_nitrod_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhpFpmServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhpFpmServiceRequest) ProtoMessage() {}

func (x *PhpFpmServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nitrod_nitrod_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhpFpmServiceRequest.ProtoReflect.Descriptor instead.
func (*PhpFpmServiceRequest) Descriptor() ([]byte, []int) {
	return file_internal_nitrod_nitrod_proto_rawDescGZIP(), []int{4}
}

func (x *PhpFpmServiceRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PhpFpmServiceRequest) GetAction() ServiceAction {
	if x != nil {
		return x.Action
	}
	return ServiceAction_RESTART
}

type NginxServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action ServiceAction `protobuf:"varint,1,opt,name=action,proto3,enum=nitrod.ServiceAction" json:"action,omitempty"`
}

func (x *NginxServiceRequest) Reset() {
	*x = NginxServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nitrod_nitrod_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NginxServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NginxServiceRequest) ProtoMessage() {}

func (x *NginxServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nitrod_nitrod_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NginxServiceRequest.ProtoReflect.Descriptor instead.
func (*NginxServiceRequest) Descriptor() ([]byte, []int) {
	return file_internal_nitrod_nitrod_proto_rawDescGZIP(), []int{5}
}

func (x *NginxServiceRequest) GetAction() ServiceAction {
	if x != nil {
		return x.Action
	}
	return ServiceAction_RESTART
}

type ImportDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database   string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	Container  string `protobuf:"bytes,2,opt,name=container,proto3" json:"container,omitempty"`
	Data       []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Compressed bool   `protobuf:"varint,4,opt,name=compressed,proto3" json:"compressed,omitempty"`
	Extension  string `protobuf:"bytes,5,opt,name=extension,proto3" json:"extension,omitempty"`
	UsesCreate bool   `protobuf:"varint,6,opt,name=usesCreate,proto3" json:"usesCreate,omitempty"`
}

func (x *ImportDatabaseRequest) Reset() {
	*x = ImportDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nitrod_nitrod_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDatabaseRequest) ProtoMessage() {}

func (x *ImportDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nitrod_nitrod_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDatabaseRequest.ProtoReflect.Descriptor instead.
func (*ImportDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_internal_nitrod_nitrod_proto_rawDescGZIP(), []int{6}
}

func (x *ImportDatabaseRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *ImportDatabaseRequest) GetContainer() string {
	if x != nil {
		return x.Container
	}
	return ""
}

func (x *ImportDatabaseRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ImportDatabaseRequest) GetCompressed() bool {
	if x != nil {
		return x.Compressed
	}
	return false
}

func (x *ImportDatabaseRequest) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *ImportDatabaseRequest) GetUsesCreate() bool {
	if x != nil {
		return x.UsesCreate
	}
	return false
}

type ServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ServiceResponse) Reset() {
	*x = ServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_nitrod_nitrod_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceResponse) ProtoMessage() {}

func (x *ServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_nitrod_nitrod_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceResponse.ProtoReflect.Descriptor instead.
func (*ServiceResponse) Descriptor() ([]byte, []int) {
	return file_internal_nitrod_nitrod_proto_rawDescGZIP(), []int{7}
}

func (x *ServiceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_internal_nitrod_nitrod_proto protoreflect.FileDescriptor

var file_internal_nitrod_nitrod_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x6e, 0x69, 0x74, 0x72, 0x6f,
	0x64, 0x2f, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x22, 0x7d, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x68, 0x70, 0x49, 0x6e, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f,
	0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e, 0x50, 0x68, 0x70, 0x49, 0x6e, 0x69, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x30, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x58, 0x64, 0x65, 0x62, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x58, 0x64, 0x65, 0x62, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50,
	0x68, 0x70, 0x49, 0x6e, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x5f, 0x0a, 0x14, 0x50, 0x68, 0x70, 0x46, 0x70,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6e, 0x69, 0x74, 0x72,
	0x6f, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x13, 0x4e, 0x67, 0x69, 0x6e,
	0x78, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc3,
	0x01, 0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x73, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x22, 0x2b, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2a, 0x90, 0x01, 0x0a, 0x0d, 0x50, 0x68, 0x70, 0x49, 0x6e, 0x69, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x41, 0x58, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x55,
	0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x49,
	0x5a, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x58, 0x5f, 0x49, 0x4e, 0x50, 0x55,
	0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x58, 0x5f,
	0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x56, 0x41, 0x52, 0x53, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10,
	0x4d, 0x41, 0x58, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x53,
	0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x10, 0x05, 0x2a, 0x31, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x02, 0x32, 0x8f, 0x03, 0x0a, 0x0c, 0x4e, 0x69, 0x74, 0x72,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x50, 0x68, 0x70, 0x49,
	0x6e, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x22, 0x2e, 0x6e, 0x69, 0x74,
	0x72, 0x6f, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x68, 0x70, 0x49, 0x6e, 0x69,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x50, 0x68, 0x70, 0x49, 0x6e, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x2e,
	0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x68, 0x70, 0x49, 0x6e, 0x69,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0d, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x58, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x1c, 0x2e, 0x6e, 0x69, 0x74,
	0x72, 0x6f, 0x64, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x58, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x6f,
	0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x58, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x12, 0x1b, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x58, 0x64, 0x65, 0x62, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x2e,
	0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6e,
	0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x32, 0x93, 0x01, 0x0a, 0x0d, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x4e,
	0x67, 0x69, 0x6e, 0x78, 0x12, 0x1b, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e, 0x4e, 0x67,
	0x69, 0x6e, 0x78, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x06,
	0x50, 0x68, 0x70, 0x46, 0x70, 0x6d, 0x12, 0x1c, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e,
	0x50, 0x68, 0x70, 0x46, 0x70, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x64, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x11, 0x5a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x6e, 0x69, 0x74, 0x72,
	0x6f, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_nitrod_nitrod_proto_rawDescOnce sync.Once
	file_internal_nitrod_nitrod_proto_rawDescData = file_internal_nitrod_nitrod_proto_rawDesc
)

func file_internal_nitrod_nitrod_proto_rawDescGZIP() []byte {
	file_internal_nitrod_nitrod_proto_rawDescOnce.Do(func() {
		file_internal_nitrod_nitrod_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_nitrod_nitrod_proto_rawDescData)
	})
	return file_internal_nitrod_nitrod_proto_rawDescData
}

var file_internal_nitrod_nitrod_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_internal_nitrod_nitrod_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_internal_nitrod_nitrod_proto_goTypes = []interface{}{
	(PhpIniSetting)(0),                 // 0: nitrod.PhpIniSetting
	(ServiceAction)(0),                 // 1: nitrod.ServiceAction
	(*ChangePhpIniSettingRequest)(nil), // 2: nitrod.ChangePhpIniSettingRequest
	(*DisableXdebugRequest)(nil),       // 3: nitrod.DisableXdebugRequest
	(*EnableXdebugRequest)(nil),        // 4: nitrod.EnableXdebugRequest
	(*GetPhpIniSettingRequest)(nil),    // 5: nitrod.GetPhpIniSettingRequest
	(*PhpFpmServiceRequest)(nil),       // 6: nitrod.PhpFpmServiceRequest
	(*NginxServiceRequest)(nil),        // 7: nitrod.NginxServiceRequest
	(*ImportDatabaseRequest)(nil),      // 8: nitrod.ImportDatabaseRequest
	(*ServiceResponse)(nil),            // 9: nitrod.ServiceResponse
}
var file_internal_nitrod_nitrod_proto_depIdxs = []int32{
	0,  // 0: nitrod.ChangePhpIniSettingRequest.setting:type_name -> nitrod.PhpIniSetting
	1,  // 1: nitrod.PhpFpmServiceRequest.action:type_name -> nitrod.ServiceAction
	1,  // 2: nitrod.NginxServiceRequest.action:type_name -> nitrod.ServiceAction
	2,  // 3: nitrod.NitroService.PhpIniSettings:input_type -> nitrod.ChangePhpIniSettingRequest
	5,  // 4: nitrod.NitroService.GetPhpIniSetting:input_type -> nitrod.GetPhpIniSettingRequest
	3,  // 5: nitrod.NitroService.DisableXdebug:input_type -> nitrod.DisableXdebugRequest
	4,  // 6: nitrod.NitroService.EnableXdebug:input_type -> nitrod.EnableXdebugRequest
	8,  // 7: nitrod.NitroService.ImportDatabase:input_type -> nitrod.ImportDatabaseRequest
	7,  // 8: nitrod.SystemService.Nginx:input_type -> nitrod.NginxServiceRequest
	6,  // 9: nitrod.SystemService.PhpFpm:input_type -> nitrod.PhpFpmServiceRequest
	9,  // 10: nitrod.NitroService.PhpIniSettings:output_type -> nitrod.ServiceResponse
	9,  // 11: nitrod.NitroService.GetPhpIniSetting:output_type -> nitrod.ServiceResponse
	9,  // 12: nitrod.NitroService.DisableXdebug:output_type -> nitrod.ServiceResponse
	9,  // 13: nitrod.NitroService.EnableXdebug:output_type -> nitrod.ServiceResponse
	9,  // 14: nitrod.NitroService.ImportDatabase:output_type -> nitrod.ServiceResponse
	9,  // 15: nitrod.SystemService.Nginx:output_type -> nitrod.ServiceResponse
	9,  // 16: nitrod.SystemService.PhpFpm:output_type -> nitrod.ServiceResponse
	10, // [10:17] is the sub-list for method output_type
	3,  // [3:10] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_internal_nitrod_nitrod_proto_init() }
func file_internal_nitrod_nitrod_proto_init() {
	if File_internal_nitrod_nitrod_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_nitrod_nitrod_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePhpIniSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nitrod_nitrod_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableXdebugRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nitrod_nitrod_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableXdebugRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nitrod_nitrod_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPhpIniSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nitrod_nitrod_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhpFpmServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nitrod_nitrod_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NginxServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nitrod_nitrod_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_nitrod_nitrod_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_nitrod_nitrod_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_internal_nitrod_nitrod_proto_goTypes,
		DependencyIndexes: file_internal_nitrod_nitrod_proto_depIdxs,
		EnumInfos:         file_internal_nitrod_nitrod_proto_enumTypes,
		MessageInfos:      file_internal_nitrod_nitrod_proto_msgTypes,
	}.Build()
	File_internal_nitrod_nitrod_proto = out.File
	file_internal_nitrod_nitrod_proto_rawDesc = nil
	file_internal_nitrod_nitrod_proto_goTypes = nil
	file_internal_nitrod_nitrod_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NitroServiceClient is the client API for NitroService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NitroServiceClient interface {
	PhpIniSettings(ctx context.Context, in *ChangePhpIniSettingRequest, opts ...grpc.CallOption) (*ServiceResponse, error)
	GetPhpIniSetting(ctx context.Context, in *GetPhpIniSettingRequest, opts ...grpc.CallOption) (*ServiceResponse, error)
	DisableXdebug(ctx context.Context, in *DisableXdebugRequest, opts ...grpc.CallOption) (*ServiceResponse, error)
	EnableXdebug(ctx context.Context, in *EnableXdebugRequest, opts ...grpc.CallOption) (*ServiceResponse, error)
	ImportDatabase(ctx context.Context, opts ...grpc.CallOption) (NitroService_ImportDatabaseClient, error)
}

type nitroServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNitroServiceClient(cc grpc.ClientConnInterface) NitroServiceClient {
	return &nitroServiceClient{cc}
}

func (c *nitroServiceClient) PhpIniSettings(ctx context.Context, in *ChangePhpIniSettingRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/nitrod.NitroService/PhpIniSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nitroServiceClient) GetPhpIniSetting(ctx context.Context, in *GetPhpIniSettingRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/nitrod.NitroService/GetPhpIniSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nitroServiceClient) DisableXdebug(ctx context.Context, in *DisableXdebugRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/nitrod.NitroService/DisableXdebug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nitroServiceClient) EnableXdebug(ctx context.Context, in *EnableXdebugRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/nitrod.NitroService/EnableXdebug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nitroServiceClient) ImportDatabase(ctx context.Context, opts ...grpc.CallOption) (NitroService_ImportDatabaseClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NitroService_serviceDesc.Streams[0], "/nitrod.NitroService/ImportDatabase", opts...)
	if err != nil {
		return nil, err
	}
	x := &nitroServiceImportDatabaseClient{stream}
	return x, nil
}

type NitroService_ImportDatabaseClient interface {
	Send(*ImportDatabaseRequest) error
	CloseAndRecv() (*ServiceResponse, error)
	grpc.ClientStream
}

type nitroServiceImportDatabaseClient struct {
	grpc.ClientStream
}

func (x *nitroServiceImportDatabaseClient) Send(m *ImportDatabaseRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nitroServiceImportDatabaseClient) CloseAndRecv() (*ServiceResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ServiceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NitroServiceServer is the server API for NitroService service.
type NitroServiceServer interface {
	PhpIniSettings(context.Context, *ChangePhpIniSettingRequest) (*ServiceResponse, error)
	GetPhpIniSetting(context.Context, *GetPhpIniSettingRequest) (*ServiceResponse, error)
	DisableXdebug(context.Context, *DisableXdebugRequest) (*ServiceResponse, error)
	EnableXdebug(context.Context, *EnableXdebugRequest) (*ServiceResponse, error)
	ImportDatabase(NitroService_ImportDatabaseServer) error
}

// UnimplementedNitroServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNitroServiceServer struct {
}

func (*UnimplementedNitroServiceServer) PhpIniSettings(context.Context, *ChangePhpIniSettingRequest) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhpIniSettings not implemented")
}
func (*UnimplementedNitroServiceServer) GetPhpIniSetting(context.Context, *GetPhpIniSettingRequest) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhpIniSetting not implemented")
}
func (*UnimplementedNitroServiceServer) DisableXdebug(context.Context, *DisableXdebugRequest) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableXdebug not implemented")
}
func (*UnimplementedNitroServiceServer) EnableXdebug(context.Context, *EnableXdebugRequest) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableXdebug not implemented")
}
func (*UnimplementedNitroServiceServer) ImportDatabase(NitroService_ImportDatabaseServer) error {
	return status.Errorf(codes.Unimplemented, "method ImportDatabase not implemented")
}

func RegisterNitroServiceServer(s *grpc.Server, srv NitroServiceServer) {
	s.RegisterService(&_NitroService_serviceDesc, srv)
}

func _NitroService_PhpIniSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePhpIniSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NitroServiceServer).PhpIniSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitrod.NitroService/PhpIniSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NitroServiceServer).PhpIniSettings(ctx, req.(*ChangePhpIniSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NitroService_GetPhpIniSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhpIniSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NitroServiceServer).GetPhpIniSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitrod.NitroService/GetPhpIniSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NitroServiceServer).GetPhpIniSetting(ctx, req.(*GetPhpIniSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NitroService_DisableXdebug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableXdebugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NitroServiceServer).DisableXdebug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitrod.NitroService/DisableXdebug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NitroServiceServer).DisableXdebug(ctx, req.(*DisableXdebugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NitroService_EnableXdebug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableXdebugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NitroServiceServer).EnableXdebug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitrod.NitroService/EnableXdebug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NitroServiceServer).EnableXdebug(ctx, req.(*EnableXdebugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NitroService_ImportDatabase_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NitroServiceServer).ImportDatabase(&nitroServiceImportDatabaseServer{stream})
}

type NitroService_ImportDatabaseServer interface {
	SendAndClose(*ServiceResponse) error
	Recv() (*ImportDatabaseRequest, error)
	grpc.ServerStream
}

type nitroServiceImportDatabaseServer struct {
	grpc.ServerStream
}

func (x *nitroServiceImportDatabaseServer) SendAndClose(m *ServiceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nitroServiceImportDatabaseServer) Recv() (*ImportDatabaseRequest, error) {
	m := new(ImportDatabaseRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _NitroService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nitrod.NitroService",
	HandlerType: (*NitroServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PhpIniSettings",
			Handler:    _NitroService_PhpIniSettings_Handler,
		},
		{
			MethodName: "GetPhpIniSetting",
			Handler:    _NitroService_GetPhpIniSetting_Handler,
		},
		{
			MethodName: "DisableXdebug",
			Handler:    _NitroService_DisableXdebug_Handler,
		},
		{
			MethodName: "EnableXdebug",
			Handler:    _NitroService_EnableXdebug_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ImportDatabase",
			Handler:       _NitroService_ImportDatabase_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "internal/nitrod/nitrod.proto",
}

// SystemServiceClient is the client API for SystemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SystemServiceClient interface {
	Nginx(ctx context.Context, in *NginxServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error)
	PhpFpm(ctx context.Context, in *PhpFpmServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error)
}

type systemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemServiceClient(cc grpc.ClientConnInterface) SystemServiceClient {
	return &systemServiceClient{cc}
}

func (c *systemServiceClient) Nginx(ctx context.Context, in *NginxServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/nitrod.SystemService/Nginx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) PhpFpm(ctx context.Context, in *PhpFpmServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/nitrod.SystemService/PhpFpm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemServiceServer is the server API for SystemService service.
type SystemServiceServer interface {
	Nginx(context.Context, *NginxServiceRequest) (*ServiceResponse, error)
	PhpFpm(context.Context, *PhpFpmServiceRequest) (*ServiceResponse, error)
}

// UnimplementedSystemServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSystemServiceServer struct {
}

func (*UnimplementedSystemServiceServer) Nginx(context.Context, *NginxServiceRequest) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nginx not implemented")
}
func (*UnimplementedSystemServiceServer) PhpFpm(context.Context, *PhpFpmServiceRequest) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhpFpm not implemented")
}

func RegisterSystemServiceServer(s *grpc.Server, srv SystemServiceServer) {
	s.RegisterService(&_SystemService_serviceDesc, srv)
}

func _SystemService_Nginx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NginxServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).Nginx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitrod.SystemService/Nginx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).Nginx(ctx, req.(*NginxServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_PhpFpm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhpFpmServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).PhpFpm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitrod.SystemService/PhpFpm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).PhpFpm(ctx, req.(*PhpFpmServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SystemService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nitrod.SystemService",
	HandlerType: (*SystemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Nginx",
			Handler:    _SystemService_Nginx_Handler,
		},
		{
			MethodName: "PhpFpm",
			Handler:    _SystemService_PhpFpm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/nitrod/nitrod.proto",
}
